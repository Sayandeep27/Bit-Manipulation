

unsigned int getFirstSetBit(int n)
    {
        int cnt=1;
        
        if(n==0) return 0;
        
        while(n>0)
        {
            int rem=n%2;
            
            if(rem!=1) cnt++;
            else break;
            
            n=n/2;
        }
        
        return cnt;
    }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <bits/stdc++.h>
using namespace std;
 
int getFirstSetBitPos(int n) 
{ 
    return ffs(n); 

}
 
 
 
// Driver function
int main()
{
    int n = 18;
    cout << getFirstSetBitPos(n) << endl;
    return 0;
}

Time Complexity: O(log2N), Time taken by ffs() function.
Auxiliary Space: O(1)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------


#include <bits/stdc++.h>
using namespace std;
 

int PositionRightmostSetbit(int n)
{
    if (n == 0)
        return 0;
    
    int position = 1;
    int m = 1;
 
    while (!(n & m)) {
 
        // left shift
        m = m << 1;
        position++;
    }
    return position;
}


int main()
{
    int n = 18;
    // function call
    cout << PositionRightmostSetbit(n);
    return 0;
}

Time Complexity: O(log2n), Traversing through all the bits of N, where at max there are logN bits.
Auxiliary Space: O(1)
