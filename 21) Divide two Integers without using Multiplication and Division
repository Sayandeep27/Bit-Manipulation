#include <iostream>
using namespace std;

int divide(int dividend, int divisor) {
    // Handle special cases
    if (divisor == 0) return INT_MAX; // Division by zero error (infinite)
    if (dividend == INT_MIN && divisor == -1) return INT_MAX; // Overflow case
    
    // Determine the sign of the result
    int sign = (dividend < 0) ^ (divisor < 0) ? -1 : 1;
    
    // Take absolute values to simplify the division process
    long long absDividend = labs(dividend);
    long long absDivisor = labs(divisor);
    
    // Initialize the quotient and remainder
    long long quotient = 0;
    
    // Perform division using bitwise operations
    while (absDividend >= absDivisor) {
        long long temp = absDivisor;
        long long multiple = 1;
        
        // Shift divisor left until it's just greater than dividend
        while (absDividend >= (temp << 1)) {
            temp <<= 1;
            multiple <<= 1;
        }
        
        // Subtract shifted divisor from dividend and update quotient
        absDividend -= temp;
        quotient += multiple;
    }
    
    // Apply sign to quotient and return
    return sign * quotient;
}

int main() {
    int dividend = 20;
    int divisor = 3;
    
    cout << "Dividing " << dividend << " by " << divisor << ": " << divide(dividend, divisor) << endl;
    
    return 0;
}
